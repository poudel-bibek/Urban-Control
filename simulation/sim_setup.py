def get_sumo_generated_tl_phases():
    """
    Phase information for the intersection (22 characters).
    1: east-right
    2: east-straight
    3: east-left
    4: east-uturn
    5: south-right
    6: south-straight
    7: south-left
    8: south-uturn
    9: west-right
    10: west-straight
    11: west-left
    12: west-uturn
    13: north-right
    14: north-straight
    15: north-left
    16: north-uturn
    17: pedestrian crossing north
    18: unused
    19: pedestrian crossing east (new)
    20: pedestrian crossing south
    21: unused
    22: pedestrian crossing west

    * For TL benchmark (10 phases defaul generated by SUMO with 93 seconds cycle time)
    """
    return  {
        'cluster_172228464_482708521_9687148201_9687148202_#5more': # Intersection  
            [{"duration": 32, "state": "rrrrgGggrrrrgGggrrGrrG"},
            {"duration": 5, "state": "rrrrgGggrrrrgGggrrrrrr"},
            {"duration": 4, "state": "rrrryyggrrrryyggrrrrrr"},
            {"duration": 6, "state": "rrrrrrGGrrrrrrGGrrrrrr"},
            {"duration": 4, "state": "rrrrrryyrrrrrryyrrrrrr"},
            {"duration": 1, "state": "rrrrrrrrrrrrrrrrrrrrrr"},
            {"duration": 31, "state": "gGggrrrrgGggrrrrGrrGrr"},
            {"duration": 5, "state": "gGggrrrrgGggrrrrrrrrrr"},
            {"duration": 4, "state": "yyyyrrrryyyyrrrrrrrrrr"},
            {"duration": 1, "state": "rrrrrrrrrrrrrrrrrrrrrr"}
        ],
        '9727816850': [ # Mid block TL + crosswalks from left to right
            {"duration": 77, "state": "GGr"},
            {"duration": 3, "state": "yyr"},
            {"duration": 5, "state": "rrG"},
            {"duration": 5, "state": "rrr"}
        ],
        '9727816623': [
            {"duration": 77, "state": "GGG"},
            {"duration": 3, "state": "yyr"},
            {"duration": 5, "state": "rrG"},
            {"duration": 5, "state": "rrr"}
        ],
        '9740157155': [
            {"duration": 77, "state": "GGr"},
            {"duration": 3, "state": "yyr"},
            {"duration": 5, "state": "rrG"},
            {"duration": 5, "state": "rrr"}
        ],
        'cluster_9740157181_9740483933': [
            {"duration": 42, "state": "GgggggGr"},
            {"duration": 3, "state": "ygggggyr"},
            {"duration": 37, "state": "rgggggrG"},
            {"duration": 5, "state": "rgggggrr"}
        ],
        '9740157194': [
            {"duration": 77, "state": "GGr"},
            {"duration": 3, "state": "yyr"},
            {"duration": 5, "state": "rrG"},
            {"duration": 5, "state": "rrr"}
        ],
        '9740157209': [
            {"duration": 77, "state": "GGr"},
            {"duration": 3, "state": "yyr"},
            {"duration": 5, "state": "rrG"},
            {"duration": 5, "state": "rrr"}
        ],
        '9740484527': [
            {"duration": 77, "state": "GGr"},
            {"duration": 3, "state": "yyr"},
            {"duration": 5, "state": "rrG"},
            {"duration": 5, "state": "rrr"}
        ]
    }

def get_intersection_phase_groups():
    """
    Since the intersection has a more complex phase logic, its implemented here.
    For other TLs, its done in apply_action.
        
    For the intersection (TL): 
    - 0: Allow E-W disallow other directions 
    - 1: Allow N-S disallow other directions
    - 2: Allow North-East and South-West direction (Dedicated left turns), disallow other directions
    - 3: Disallow vehicular traffic in all direction 

    Two additional phase groups that introduce yellow in between.
    - 4: four timesteps of yellow for E-W, 1 timestep or all-red, then green for N-S
    - 5: four timesteps of yellow for N-S including dedicated left turns, 1 timestep or all-red, then green for E-W
    
    * The sum of the 3 phases should be equal to action_duration

    For the intersection (Crosswalks):
    * Essentially in the string towards the end of the phase ArBCrD, find replacement values for A, B, C, D. 
    * A = allow North, B = allow East, C = allow South, D = allow West
    - 0: N-S Red, E-W Green
    - 1: N-S Green, E-W Red
    - 2: N-W Green, S-E Green (Dedicated left turns)
    - 3: N-S Red, E-W Red (All Red)
    """

    int_tl_phase_groups = {
        0: "GGGGrrrrGGGGrrrr", # east-straight, east-right, west-straight, west-right, since east-left and west-left share the lane, they are also G. Same for u-turns. 
        1: "rrrrGGrrrrrrGGrr", # north-straight, north-right, south-straight, south-right
        2: "rrrrrrGGrrrrrrGG", # north-east, south-west (for visuals, make u-turn ON as well)
        3: "rrrrrrrrrrrrrrrr", # all red
        4: { 0: "yyrrrrrryyrrrrrr", # switch from 0 to 1
            1: "yyrrrrrryyrrrrrr",
            2: "yyrrrrrryyrrrrrr",
            3: "yyrrrrrryyrrrrrr",
            4: "rrrrrrrrrrrrrrrr",
            5: "rrrrGGrrrrrrGGrr",
            6: "rrrrGGrrrrrrGGrr",
            7: "rrrrGGrrrrrrGGrr",
            8: "rrrrGGrrrrrrGGrr",
            9: "rrrrGGrrrrrrGGrr",
        }, 
        5: { 0: "rrrryyrrrrrryyrr", # switch from 1 to 0
            1: "rrrryyrrrrrryyrr",
            2: "rrrryyrrrrrryyrr",
            3: "rrrryyrrrrrryyrr",
            4: "rrrrrrrrrrrrrrrr",
            5: "GGGGrrrrGGGGrrrr",
            6: "GGGGrrrrGGGGrrrr",
            7: "GGGGrrrrGGGGrrrr",
            8: "GGGGrrrrGGGGrrrr",
            9: "GGGGrrrrGGGGrrrr",
        }
    }
            
    int_crosswalk_phase_groups = {
        0: {'A': 'G', 'B': 'r', 'C': 'G', 'D': 'r'}, # N-S Green, E-W Red 
        1: {'A': 'r', 'B': 'G', 'C': 'r', 'D': 'G'}, # E-W Green, N-S Red
        2: {'A': 'r', 'B': 'r', 'C': 'r', 'D': 'r'}, # All Red
        3: {'A': 'G', 'B': 'G', 'C': 'G', 'D': 'G'}, # All Green
    }
    return int_tl_phase_groups, int_crosswalk_phase_groups

def get_direction_lookup():
    """
    Helper (lookup dict) to determine whether the edges are present upside (north) or downside (south) relative to the corridor road.
    Not used. Because in some of the pedestrian crosswalk vicinity edges, the same vicinity edge can be upside for one and downside for another.
    """
    return {
    'upside': [ 
        '1054121747#2', ':9687187501_w1', ':9687187526_w0', ':9687187501_w0', ':9687187500_w1',
        '1054116929#4', ':9687148199_w0','1054116933_0',':cluster_172228464_482708521_9687148201_9687148202_#5more_w6',
        '1054116929#0', ':9687148197_w0',':9666242268_w0', '1054116930',
        ':9727816851_w0', '1058666207#1', ':9727816850_w1',
        ':9666274798_w0', '1051865729#3', ':9727816623_w0',
        ':9666274886_w0', '1060131391#1', ':9740157155_w0',
        ':cluster_9740157181_9740483933_w1', ':9655154530_w0', '1060131401#3',
        ':9740157194_w0', ':9740157195_w0', ':10054309033_w0', ':9740157192_w0', '1060131406', '1060131405#0',
        '1060131408#1', ':9740157209_w1', ':9740157210_w0',
        ':9740484527_w1', '1050677005#21', ':9740484524_w0',
        ':cluster_172228408_9739966907_9739966910_w3', '1060112789#2',
        ],
    'downside': [ 
        ':9727816658_w0', '1058666192', ':9687187495_w0', ':9687187500_w0',
        '1054116929#2', '1058666193_0',':9687148198_w0',':9727816638_w0',':cluster_172228464_482708521_9687148201_9687148202_#5more_w5',
        '1054116929#1', ':9727816638_w0',':9687148198_w0',':cluster_172228464_482708521_9687148201_9687148202_#5more_w4',
        ':9727816846_w0', ':9727816850_w0', ':9727816844_w0', '1058666207#0', '1058666206#0',
        ':9727816625_w0', '1058666188#1', ':9727816623_w1',
        ':9740157154_w0', '1060131391#0', ':9740157155_w1', ':9740157153_w0', '1060131390',
        '1060131402_0', ':9740157180_w0', ':cluster_9740157181_9740483933_w0', '1060131401#2',
        '1060131405#1', ':9740157194_w1', ':9740157204_w0',
        ':9740157209_w0', ':9740157207_w0', ':9740157211_w0', '1060131408#0', '1060131410','1060131404#2',
        ':9740484528_w0', '1060166260#1', ':9740484527_w0',
        ':9739966908_w0', ':9739966904_w0', '1060112789#0', ':cluster_172228408_9739966907_9739966910_w2', '1060112789#1',
        ],
    }

def get_related_lanes_edges():
    """
    Helper function to map each direction to edges/ lanes (so that veh/ pedestrians can be counted to generate occupancy map)
    We make use of traci.edge.getLastStepPersonIDs(edge) to get pedestrian info and both traci.lane.getLastStepVehicleIDs(lane) and traci.edge.getLastStepVehicleIDs(edge) to get vehicle info

    At the intersection: 
    - There are 8 incoming lanes, inside lanes, and 4 outgoing lanes for vehicles. 
    - In most of the cases, same lane is used for multiple turn directions (straight, left) mark them with -1.
    - Pedestrian at west means they want to cross the crosswalk located in the west (from both sides)
    - Pedestrian (outgoing) means they are inside the crosswalk
    - Pedestrians (incoming): If the edge ends with _wx, then we are certain that they want to cross (listed in main) but for other edges, they could be going in orthogonal direction as well (listed in vicinity).  

    At Mid block crosswalks:
    - There are no turn directions.
    - For pedestrians, there is only one crosswalk per mid block TL i.e., keeping that as direction north.
    - Pedestrian (outgoing) means they are inside the crosswalk
    - Vicinity edges are not used

    * List contains lanes for vehicles and edges for pedestrians
    * Lanes/ Edges going West to East have a negative sign in front of their ids
    
    * vicinity edges:
    1. [':9687148199_w0', ':9687148211_w0', '1054116933', '1054116929#5', '1054116929#4']
    2. ['1058666193', '1054116929#2', '1054116929#1', ':9727816638_w0', ':9687148198_w0']
    3. ['1054116929#0', '1054116929#9', '1054116930', ':9687148197_w0', ':9666242268_w0']
    4. [':9687148200_w0',':9687148182_w0', '1054116931', '1054116929#6', '1054116929#7']
    * South = 1 + 2, East = 3 + 2, West = 4 + 1, North = 3 + 4
    * make use of . as a delimiter to get the edge 
    """

    return { 
        'cluster_172228464_482708521_9687148201_9687148202_#5more': { # Intersection 
            "vehicle": {
                "incoming": {
                    "south-straight": ['1078803478#0_1', 'edge.:172668791_0','1078803477#5_1'], 
                    "south-right": ['-1'],
                    "south-left": ['1078803478#0_2'],
                    "west-straight": ['1060131306#0_0'],
                    "west-right": ['-1'] ,
                    "west-left": ['-1'],
                    "east-straight": ['-16666012#2_0'] ,
                    "east-right": ['-1'], # The same lane in east-straight acts as right and left
                    "east-left": ['-1'],
                    "north-straight": ['773672648#0_1'], 
                    "north-right": ['773672648#0_0'],
                    "north-left": ['773672648#0_2'],
                },
                "inside": {
                    "south-straight": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_5'],
                    "south-right": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_4'],
                    "south-left": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_6'],
                    "west-straight": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_9'],
                    "west-right": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_8'],
                    "west-left": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_10'],
                    "east-straight": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_1'],
                    "east-right": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_0'],
                    "east-left": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_2'],
                    "north-straight": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_13'],
                    "north-right": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_12'],
                    "north-left": ['edge.:cluster_172228464_482708521_9687148201_9687148202_#5more_14'],
                },
                "outgoing": {
                    "west": ['-1060131306#0_0'] , 
                    "south": ['773672649#1_0'],
                    "east": ['16666012#2_0'], 
                    "north": ['452522817#1_1'],
                },
            },
            "pedestrian": {
                "incoming": { 
                    "west": {
                        "main": [':cluster_172228464_482708521_9687148201_9687148202_#5more_w7',':cluster_172228464_482708521_9687148201_9687148202_#5more_w0'] ,
                        "vicinity": [':9687148200_w0',':9687148182_w0', '1054116931', '1054116929#6', '1054116929#7', ':9687148199_w0', ':9687148211_w0', '1054116933', '1054116929#5', '1054116929#4'],
                        },
                    "south": {
                        "main": [':cluster_172228464_482708521_9687148201_9687148202_#5more_w5', ':cluster_172228464_482708521_9687148201_9687148202_#5more_w6'],
                        "vicinity": [':9687148199_w0', ':9687148211_w0', '1054116933', '1054116929#5', '1054116929#4', '1058666193', '1054116929#2', '1054116929#1', ':9727816638_w0', ':9687148198_w0'],
                        },
                    "east": {
                        "main": [':cluster_172228464_482708521_9687148201_9687148202_#5more_w4',':cluster_172228464_482708521_9687148201_9687148202_#5more_w3' ],
                        "vicinity": ['1054116929#0', '1054116929#9', '1054116930', ':9687148197_w0', ':9666242268_w0', '1058666193', '1054116929#2', '1054116929#1', ':9727816638_w0', ':9687148198_w0'],
                        },
                    "north": {
                        "main": [':cluster_172228464_482708521_9687148201_9687148202_#5more_w1',':cluster_172228464_482708521_9687148201_9687148202_#5more_w2'] ,
                        "vicinity": ['1054116929#0', '1054116929#9', '1054116930', ':9687148197_w0', ':9666242268_w0', ':9687148200_w0',':9687148182_w0', '1054116931', '1054116929#6', '1054116929#7'],
                        },
                },
                "outgoing": { 
                    "west": {
                        "main": [':cluster_172228464_482708521_9687148201_9687148202_#5more_c3'],
                        "vicinity": [],
                    },
                    "south": {
                        "main": [':cluster_172228464_482708521_9687148201_9687148202_#5more_c2'] ,
                        "vicinity": [],
                    },
                    "east": {
                        "main": [':cluster_172228464_482708521_9687148201_9687148202_#5more_c1'],
                        "vicinity": [],
                    },
                    "north": {
                        "main": [':cluster_172228464_482708521_9687148201_9687148202_#5more_c0'],
                        "vicinity": [],
                    },
                },
            }
        },

        # Mid block TL + crosswalks from left to right
        '9727816850': { 
            "vehicle": {
                "incoming": {
                    "west-straight": ['-16666012#3_0'],
                    "east-straight": ['16666012#2_0'],
                },
                "inside": {
                    "west-straight": [':9727816850_0'], 
                    "east-straight": [':9727816850_1'],
                },
                "outgoing": {
                    "west-straight": ['-16666012#2_0'],
                    "east-straight": ['16666012#3_0'],
                }
            },
            "pedestrian": {
                "incoming": {
                    "north": {
                        "main": [':9727816850_w1', '1058666207#1', ':9727816844_w0',':9727816850_w0', '1058666206#0', '1058666207#0'],
                        },
                },
                "outgoing": {
                    "north": {
                        "main": [':9727816850_c0']
                    }
                }
            }
        },
        '9727816623': {
            "vehicle": {
                "incoming": {
                    "west-straight": ['-16666012#5_0'],
                    "east-straight": ['16666012#4_0'],
                },
                "inside": {
                    "west-straight": [':9727816623_0'],
                    "east-straight": [':9727816623_1'],
                },
                "outgoing": {
                    "west-straight": ['-16666012#4_0'],
                    "east-straight": ['16666012#5_0'],
                }
            },
            "pedestrian": {
                "incoming": {
                    "north": {
                        "main": ['1058666188#1', '1051865729#3',':9727816623_w0', ':9727816623_w1'],
                    },
                },  
                "outgoing": {
                    "north": {
                        "main": [':9727816623_c0']
                    }
                }
            }
        },
        '9740157155': {
            "vehicle": {
                "incoming": {
                    "west-straight": ['-16666012#7_0'],
                    "east-straight": ['16666012#6_0'],
                },
                "inside": {
                    "west-straight": [':9740157155_0'],
                    "east-straight": [':9740157155_1'],
                },
                "outgoing": {
                    "west-straight": ['-16666012#6_0'],
                    "east-straight": ['16666012#7_0'],
                }
            },
            "pedestrian": {
                "incoming": {
                    "north": {
                        "main": ['1060131391#1', '1060131391#0', ':9740157155_w0',':9740157155_w1'],
                    },
                },
                "outgoing": {
                    "north": {
                        "main": [':9740157155_c0']
                    }
                }
            }
        },
        'cluster_9740157181_9740483933': {
            "vehicle": {
                "incoming": {
                    "west-straight": ['-16666012#11_0'],
                    "east-straight": ['16666012#9_0'],
                },
                "inside": {
                    "west-straight": [':9740157181_0'],
                    "east-straight": [':9740157181_1'],
                },
                "outgoing": {
                    "west-straight": ['-16666012#9_0'],
                    "east-straight": ['16666012#11_0'], 
                }
            },
            "pedestrian": {
                "incoming": {
                    "north": {
                        "main": ['1060131401#2', '1060131401#3', ':cluster_9740157181_9740483933_w0', ':cluster_9740157181_9740483933_w1'],
                    },
                },
                "outgoing": {
                    "north": {
                        "main": [':cluster_9740157181_9740483933_c0']
                    }
                }
            }
        },
        '9740157194': {
            "vehicle": {
                "incoming": {
                    "west-straight": ['-16666012#13_0'],
                    "east-straight": ['16666012#12_0'],
                },
                "inside": {
                    "west-straight": [':9740157194_0'],
                    "east-straight": [':9740157194_1'],
                },
                "outgoing": {
                    "west-straight": ['-16666012#12_0'],
                    "east-straight": ['16666012#13_0'],
                }
            },
            "pedestrian": {
                "incoming": {
                    "north": {
                        "main": ['1060131405#1', '1060131405#0', ':9740157194_w1', ':9740157194_w0', ':9740157192_w0', '1060131406'],
                    },
                },
                "outgoing": {
                    "north": {
                        "main": [':9740157194_c0']
                    }
                }
            }
        },
        '9740157209': {
            "vehicle": {
                "incoming": {
                    "west-straight": ['-16666012#14_0'],
                    "east-straight": ['16666012#13_0'],
                },
                "inside": {
                    "west-straight": [':9740157209_0'],
                    "east-straight": [':9740157209_1'],
                },
                "outgoing": {
                    "west-straight": ['-16666012#13_0'],
                    "east-straight": ['16666012#14_0'],
                }
            },
            "pedestrian": {
                "incoming": {
                    "north": {
                        "main": ['1060131408#0', '1060131410', '1060131408#1', ':9740157209_w0', ':9740157209_w1'],
                    },
                },
                "outgoing": {
                    "north": {
                        "main": [':9740157209_c0']
                    }
                }
            }
        },
        '9740484527': {
            "vehicle": {
                "incoming": {
                    "west-straight": ['-16666012#17_0'],
                    "east-straight": ['16666012#16_0'],
                },
                "inside": {
                    "west-straight": [':9740484527_0'],
                    "east-straight": [':9740484527_1'],
                },
                "outgoing": {
                    "west-straight": ['-16666012#16_0'],
                    "east-straight": ['16666012#17_0'],
                }
            },
            "pedestrian": {
                "incoming": {
                    "north": {
                        "main": ['1060166260#1', '1050677005#21', ':9740484527_w0', ':9740484527_w1'],
                    },
                },
                "outgoing": {
                    "north": {
                        "main": [':9740484527_c0']
                    }
                }
            }
        }
    }


